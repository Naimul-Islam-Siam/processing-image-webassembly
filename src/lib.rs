use base64::{decode, encode};
use image::load_from_memory;
use image::ImageOutputFormat::Png;
use wasm_bindgen::prelude::wasm_bindgen;
use web_sys::console::log_1 as log;

// web_sys crate exports JavaScript functions defined by the browser
// wasm_bindgen crate exports functions created / generated by the developer
#[wasm_bindgen]
pub fn grayscale(encoded_file: &str) -> String {
   log(&"Grayscale Called".into()); // into() is used to convert a str into a JavaScript value

   let base64_to_vector = decode(encoded_file).unwrap(); // decode base64 string to binary data
   log(&"Image Decoded".into());

   let mut img = load_from_memory(&base64_to_vector).unwrap();
   log(&"Image Loaded".into());

   img = img.grayscale();
   log(&"Applied Grayscale Effect".into());

   let mut buffer = vec![];
   img.write_to(&mut buffer, Png).unwrap();
   log(&"Processed Image Written".into());

   let encoded_img = encode(&buffer);
   let data_url = format!("data:image/png;base64,{}", encoded_img);

   return data_url;
}

// return type of the fn grayscale is String because in Rust, if we are borrowing a string then the type is "str".
// But if we have ownership of the string then the type is "String"
